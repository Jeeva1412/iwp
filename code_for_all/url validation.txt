<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>URL Validation</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            background-color: #f0f0f0;
        }

        .container {
            text-align: center;
        }

        input[type="text"] {
            padding: 10px;
            font-size: 16px;
        }

        button {
            padding: 10px 20px;
            font-size: 16px;
            cursor: pointer;
        }

        #result {
            margin-top: 20px;
            font-size: 18px;
        }
    </style>
</head>
<body>
    <div class="container">
        <label for="urlInput">Enter a URL:</label><br>
        <input type="text" id="urlInput" placeholder="https://example.com"><br>
        <button onclick="validateURL()">Validate URL</button>
        <p id="result"></p>
    </div>

    <script >
      function validateURL() {
        var url = document.getElementById("urlInput").value;
        var pattern = new RegExp('^(https?:\\/\\/)?'+ // protocol
                '((([a-z\\d]([a-z\\d-]*[a-z\\d])*)\\.)+[a-z]{2,}|'+ // domain name
                '((\\d{1,3}\\.){3}\\d{1,3}))'+ // OR ip (v4) address
                '(\\:\\d+)?(\\/[-a-z\\d%_.~+]*)*'+ // port and path
                '(\\?[;&a-z\\d%_.~+=-]*)?'+ // query string
                '(\\#[-a-z\\d_]*)?$','i'); // fragment locator
        if(!pattern.test(url)) {
            document.getElementById("result").textContent = "Invalid URL. Please enter a valid URL.";
        } else {
            document.getElementById("result").textContent = "Valid URL!";
        }
    }
    
    </script>
</body>
</html>


Explanation:
HTML Structure: Provides a form with an input field (urlInput) for entering a URL, a button (Validate URL) to trigger validation, and a paragraph (result) to display the validation result.

CSS: Basic styling to center-align content and style input elements.

JavaScript (script.js):

validateURL() function retrieves the input URL and checks its format using a regular expression (pattern).
The regular expression pattern checks for:
Optional protocol (http:// or https://)
Domain name (with support for domains like example.com or IP addresses)
Optional port and path
Optional query string and fragment locator
If the input URL does not match the pattern, it updates the result paragraph with an "Invalid URL" message. Otherwise, it displays "Valid URL!".
Functionality: When the user clicks the "Validate URL" button, the JavaScript function runs, checks the input URL against the regular expression pattern, and updates the result paragraph accordingly.

This example provides a basic framework for URL validation in JavaScript, ensuring that the entered URL conforms to a valid format according to common URL syntax rules. Adjustments can be made based on specific URL validation requirements or additional checks needed for different URL formats or protocols.